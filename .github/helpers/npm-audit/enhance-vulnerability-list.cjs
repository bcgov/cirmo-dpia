const getLatestDependencyInfo = require("./get-latest-dep-info.cjs");
const isFixAvailable = require("./is-fix-available.cjs");
const findDirectDependencies = require("./find-direct-dependencies.cjs");
const path = require("path");
const fs = require("fs");

/**
 * Enhance vulnerabilities with latest version info and formatted parent dependencies.
 * @returns {Promise<Object>} - The enhanced audit result with vulnerabilities.
 */
const enhanceVulnerabilityList = async (auditResult, directoryPath) => {
  try {
    const { vulnerabilities } = auditResult;

    const packageJson = JSON.parse(
      fs.readFileSync(
        path.resolve(__dirname, `../../../${directoryPath}/package.json`),
        "utf-8"
      )
    );

    const enhancedVulnerabilities = await Promise.all(
      vulnerabilities.map(async (vuln) => {
        try {
          // Fetch latest version info for the vulnerable dependency
          const latestInfo = await getLatestDependencyInfo(vuln.name);
          const latestVersion = latestInfo.latestVersion;

          // Transform parentDependencies into object array with fixAvailable and version properties
          const parentDependencies = await Promise.all(
            (vuln.parentDependencies || []).map(async (parentDep) => {
              const parentInfo = await getLatestDependencyInfo(parentDep);
              const childVersion = Object(
                parentInfo?.childDependencies
              ).hasOwnProperty(vuln.name)
                ? parentInfo?.childDependencies[vuln.name]
                : false;
              const fixAvailableIncludesParentDep =
                vuln.fixAvailable.name === parentDep;
              const fixAvailable = childVersion
                ? isFixAvailable(latestVersion, vuln.range, childVersion)
                : false;
              const directDependenciesList = findDirectDependencies(
                parentDep,
                directoryPath
              ).directDependencies;

              const directDependenciesObjs = await Promise.all(
                directDependenciesList.map(async (directDep) => {
                  const details = await getLatestDependencyInfo(directDep);
                  const currentVersion =
                    packageJson.dependencies[directDep] ??
                    packageJson.devDependencies[directDep];

                  // There can only be a possibility of a fix available if the original parent dep has
                  // a fix available, and the latestVersion is greater than the current version.
                  const possibleFixAvailable =
                    fixAvailable && details.latestVersion !== currentVersion;

                  return {
                    name: directDep,
                    latestVersion: details.latestVersion,
                    currentVersion,
                    possibleFixAvailable,
                  };
                })
              );

              return {
                name: parentDep,
                isDirect: findDirectDependencies(parentDep, directoryPath)
                  .isDirect,
                fixAvailable: fixAvailableIncludesParentDep || fixAvailable,
                latestVersion: parentInfo.latestVersion,
                childVersion: childVersion,
                directDependencies: directDependenciesObjs,
              };
            })
          );

          return {
            ...vuln,
            latestVersion,
            parentDependencies,
          };
        } catch (error) {
          console.error(
            `Error enhancing vulnerability for ${vuln.name}:`,
            error
          );
          return vuln; // Return original vulnerability if there's an error
        }
      })
    );

    return {
      ...auditResult,
      vulnerabilities: enhancedVulnerabilities,
    };
  } catch (error) {
    console.error("Error enhancing vulnerabilities:", error);
    throw error;
  }
};

module.exports = enhanceVulnerabilityList;
